{
    "swagger": "2.0",
    "info": {
        "description": "The shinpuru main REST API.",
        "title": "shinpuru main API",
        "contact": {},
        "version": "1.0"
    },
    "basePath": "/api/v1",
    "paths": {
        "/auth/accesstoken": {
            "post": {
                "description": "Exchanges the cookie-passed refresh token with a generated access token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Access Token Exchange",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AccessTokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/auth/check": {
            "get": {
                "description": "Returns OK if the request is authorized.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Authorization Check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Reovkes the currently used access token and clears the refresh token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Logout",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    }
                }
            }
        },
        "/guilds": {
            "get": {
                "description": "Returns a list of guilds the authenticated user has in common with shinpuru.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "List Guilds",
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.GuildReduced"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id": {
            "get": {
                "description": "Returns a single guild object by it's ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Guild",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Guild"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/antiraid/joinlog": {
            "get": {
                "description": "Returns a list of joined members during an antiraid trigger.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Antiraid Joinlog",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.JoinLogEntry"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes all entries of the antiraid joinlog.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Reset Antiraid Joinlog",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/inviteblock": {
            "post": {
                "description": "Toggle enabled state of the guild invite block system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Toggle Guild Inviteblock Enable",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The enable status payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EnableStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/permissions": {
            "get": {
                "description": "Returns the specified guild permission settings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Guild Permission Settings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PermissionsMap"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Apply a new guild permission rule for a specified role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Apply Guild Permission Rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The permission rule payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PermissionsUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/reports": {
            "get": {
                "description": "Returns a list of guild modlog entries for the given guild.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Guild Modlog",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset of returned entries",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The amount of returned entries (0 = all)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Report"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/reports/count": {
            "get": {
                "description": "Returns the total count of entries in the guild mod log.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Guild Modlog Count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Count"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/scoreboard": {
            "get": {
                "description": "Returns a list of scoreboard entries for the given guild.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Guild Scoreboard",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 25,
                        "description": "Limit the amount of result values",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.GuildKarmaEntry"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/settings": {
            "get": {
                "description": "Returns the specified general guild settings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Guild Settings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.GuildSettings"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Returns the specified general guild settings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Guild Settings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Modified guild settings payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GuildSettings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/settings/antiraid": {
            "get": {
                "description": "Returns the specified guild antiraid settings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Guild Antiraid Settings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AntiraidSettings"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Update the guild antiraid settings specification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update Guild Antiraid Settings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The guild antiraid settings payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AntiraidSettings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/settings/flushguilddata": {
            "post": {
                "description": "Flushes all guild data from the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Flush Guild Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The guild flush payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.FlushGuildRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.State"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/settings/karma": {
            "get": {
                "description": "Returns the specified guild karma settings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Guild Karma Settings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.KarmaSettings"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Update the guild karma settings specification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update Guild Karma Settings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The guild karma settings payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.KarmaSettings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/settings/karma/blocklist": {
            "get": {
                "description": "Returns the specified guild karma blocklist entries.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Guild Karma Blocklist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Member"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/settings/karma/blocklist/:memberid": {
            "put": {
                "description": "Add a guild karma blocklist entry.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Add Guild Karma Blocklist Entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "memberid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a guild karma blocklist entry.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Remove Guild Karma Blocklist Entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "memberid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/settings/karma/rules": {
            "get": {
                "description": "Returns a list of specified guild karma rules.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Guild Settings Karma Rules",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.KarmaRule"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a guild karma rule.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create Guild Settings Karma",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The karma rule payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.KarmaRule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.KarmaRule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/settings/karma/rules/:ruleid": {
            "post": {
                "description": "Update a karma rule by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update Guild Settings Karma",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the rule.",
                        "name": "ruleid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The karma rule update payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.KarmaRule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.KarmaRule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a guild karma rule by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Remove Guild Settings Karma",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the rule.",
                        "name": "ruleid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.State"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/settings/logs": {
            "get": {
                "description": "Returns the total or filtered count of guild log entries.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Guild Log Count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Count"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/settings/logs/state": {
            "get": {
                "description": "Returns the enabled state of the guild log setting.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Guild Settings Log State",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.State"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Update the enabled state of the log state guild setting.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update Guild Settings Log State",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The state payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.State"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.State"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/settings/logs/state/:entryid": {
            "delete": {
                "description": "Delete a single or all guild log entries.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete Guild Log Entries",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the entry to be deleted.",
                        "name": "entryid",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.State"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/starboard": {
            "get": {
                "description": "Returns a list of starboard entries for the given guild.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Guild Starboard",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.StarboardEntryResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/unbanrequests": {
            "get": {
                "description": "Returns the list of the guild unban requests.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Guild Unbanrequests",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListReponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UnbanRequest"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/unbanrequests/:requestid": {
            "get": {
                "description": "Returns a single guild unban request by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Single Guild Unbanrequest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the unbanrequest.",
                        "name": "requestid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UnbanRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Process a guild unban request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Process Guild Unbanrequest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the unbanrequest.",
                        "name": "requestid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UnbanRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/:id/unbanrequests/count": {
            "get": {
                "description": "Returns the total or filtered count of guild unban requests.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Guild Unbanrequests Count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Count"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/me": {
            "get": {
                "description": "Returns the user object of the currently authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Me",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                }
            }
        },
        "/ota": {
            "get": {
                "description": "Logs in the current browser session by using the passed pre-obtained OTA token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "OTA Login",
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/reports/:id": {
            "get": {
                "description": "Returns a single report object by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The report ID.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Report"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/reports/:id/revoke": {
            "post": {
                "description": "Revokes a given report by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Revoke Report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The report ID.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The revoke reason payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReasonRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Report"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/settings/noguildinvite": {
            "get": {
                "description": "Returns the settings status for the suggested guild invite when the logged in user is not on any guild with shinpuru.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get No Guild Invites Status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.InviteSettingsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "409": {
                        "description": "Returned when no channel could be found to create invite for.",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Set the status for the suggested guild invite when the logged in user is not on any guild with shinpuru.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Set No Guild Invites Status",
                "parameters": [
                    {
                        "description": "Invite Settings Payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.InviteSettingsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.APITokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "409": {
                        "description": "Returned when no channel could be found to create invite for.",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/settings/presence": {
            "get": {
                "description": "Returns the bot's displayed presence status.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Presence",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presence.Presence"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Set the bot's displayed presence status.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Set Presence",
                "parameters": [
                    {
                        "description": "Presence Payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presence.Presence"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.APITokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Is returned when no token was generated before.",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/sysinfo": {
            "get": {
                "description": "Returns general global system information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "System Information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SystemInfo"
                        }
                    }
                }
            }
        },
        "/token": {
            "get": {
                "description": "Returns general metadata information about a generated API token. The response does **not** contain the actual token!",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "API Token Info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.APITokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Is returned when no token was generated before.",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "(Re-)Generates and returns general metadata information about an API token **including** the actual API token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "API Token Generation",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.APITokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Invalidates the currently generated API token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "API Token Deletion",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/util/color/:hexcode": {
            "get": {
                "description": "Produces a square image of the given color and size.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "image/png"
                ],
                "summary": "Color Generator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex Code of the Color to produce",
                        "name": "hexcode",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 24,
                        "description": "The dimension of the square image",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "data"
                        }
                    }
                }
            }
        },
        "/util/commands": {
            "get": {
                "description": "Returns a list of registered commands and their description.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Command List",
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CommandInfo"
                            }
                        }
                    }
                }
            }
        },
        "/util/landingpageinfo": {
            "get": {
                "description": "Returns general information for the landing page like the local invite parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Landing Page Info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.LandingPageResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "discordgo.Channel": {
            "type": "object",
            "properties": {
                "application_id": {
                    "description": "ApplicationID of the DM creator Zeroed if guild channel or not a bot user",
                    "type": "string"
                },
                "bitrate": {
                    "description": "The bitrate of the channel, if it is a voice channel.",
                    "type": "integer"
                },
                "guild_id": {
                    "description": "The ID of the guild to which the channel belongs, if it is in a guild.\nElse, this ID is empty (e.g. DM channels).",
                    "type": "string"
                },
                "icon": {
                    "description": "Icon of the group DM channel.",
                    "type": "string"
                },
                "id": {
                    "description": "The ID of the channel.",
                    "type": "string"
                },
                "last_message_id": {
                    "description": "The ID of the last message sent in the channel. This is not\nguaranteed to be an ID of a valid message.",
                    "type": "string"
                },
                "last_pin_timestamp": {
                    "description": "The timestamp of the last pinned message in the channel.\nEmpty if the channel has no pinned messages.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the channel.",
                    "type": "string"
                },
                "nsfw": {
                    "description": "Whether the channel is marked as NSFW.",
                    "type": "boolean"
                },
                "owner_id": {
                    "description": "ID of the DM creator Zeroed if guild channel",
                    "type": "string"
                },
                "parent_id": {
                    "description": "The ID of the parent channel, if the channel is under a category",
                    "type": "string"
                },
                "permission_overwrites": {
                    "description": "A list of permission overwrites present for the channel.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/discordgo.PermissionOverwrite"
                    }
                },
                "position": {
                    "description": "The position of the channel, used for sorting in client.",
                    "type": "integer"
                },
                "rate_limit_per_user": {
                    "description": "Amount of seconds a user has to wait before sending another message (0-21600)\nbots, as well as users with the permission manage_messages or manage_channel, are unaffected",
                    "type": "integer"
                },
                "recipients": {
                    "description": "The recipients of the channel. This is only populated in DM channels.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/discordgo.User"
                    }
                },
                "topic": {
                    "description": "The topic of the channel.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the channel.",
                    "type": "integer"
                },
                "user_limit": {
                    "description": "The user limit of the voice channel.",
                    "type": "integer"
                }
            }
        },
        "discordgo.PermissionOverwrite": {
            "type": "object",
            "properties": {
                "allow": {
                    "type": "string",
                    "example": "0"
                },
                "deny": {
                    "type": "string",
                    "example": "0"
                },
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "discordgo.Role": {
            "type": "object",
            "properties": {
                "color": {
                    "description": "The hex color of this role.",
                    "type": "integer"
                },
                "hoist": {
                    "description": "Whether this role is hoisted (shows up separately in member list).",
                    "type": "boolean"
                },
                "id": {
                    "description": "The ID of the role.",
                    "type": "string"
                },
                "managed": {
                    "description": "Whether this role is managed by an integration, and\nthus cannot be manually added to, or taken from, members.",
                    "type": "boolean"
                },
                "mentionable": {
                    "description": "Whether this role is mentionable.",
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the role.",
                    "type": "string"
                },
                "permissions": {
                    "description": "The permissions of the role on the guild (doesn't include channel overrides).\nThis is a combination of bit masks; the presence of a certain permission can\nbe checked by performing a bitwise AND between this int and the permission.",
                    "type": "string",
                    "example": "0"
                },
                "position": {
                    "description": "The position of this role in the guild's role hierarchy.",
                    "type": "integer"
                }
            }
        },
        "discordgo.User": {
            "type": "object",
            "properties": {
                "avatar": {
                    "description": "The hash of the user's avatar. Use Session.UserAvatar\nto retrieve the avatar itself.",
                    "type": "string"
                },
                "bot": {
                    "description": "Whether the user is a bot.",
                    "type": "boolean"
                },
                "discriminator": {
                    "description": "The discriminator of the user (4 numbers after name).",
                    "type": "string"
                },
                "email": {
                    "description": "The email of the user. This is only present when\nthe application possesses the email scope for the user.",
                    "type": "string"
                },
                "flags": {
                    "description": "The flags on a user's account.\nOnly available when the request is authorized via a Bearer token.",
                    "type": "integer"
                },
                "id": {
                    "description": "The ID of the user.",
                    "type": "string"
                },
                "locale": {
                    "description": "The user's chosen language option.",
                    "type": "string"
                },
                "mfa_enabled": {
                    "description": "Whether the user has multi-factor authentication enabled.",
                    "type": "boolean"
                },
                "premium_type": {
                    "description": "The type of Nitro subscription on a user's account.\nOnly available when the request is authorized via a Bearer token.",
                    "type": "integer"
                },
                "public_flags": {
                    "description": "The public flags on a user's account.\nThis is a combination of bit masks; the presence of a certain flag can\nbe checked by performing a bitwise AND between this int and the flag.",
                    "type": "integer"
                },
                "system": {
                    "description": "Whether the user is an Official Discord System user (part of the urgent message system).",
                    "type": "boolean"
                },
                "token": {
                    "description": "The token of the user. This is only present for\nthe user represented by the current session.",
                    "type": "string"
                },
                "username": {
                    "description": "The user's username.",
                    "type": "string"
                },
                "verified": {
                    "description": "Whether the user's email is verified.",
                    "type": "boolean"
                }
            }
        },
        "models.APITokenResponse": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "expires": {
                    "type": "string"
                },
                "hits": {
                    "type": "integer"
                },
                "last_access": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "models.AccessTokenResponse": {
            "type": "object",
            "properties": {
                "expires": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "models.AntiraidSettings": {
            "type": "object",
            "properties": {
                "burst": {
                    "type": "integer"
                },
                "regeneration_period": {
                    "type": "integer"
                },
                "state": {
                    "type": "boolean"
                }
            }
        },
        "models.CommandInfo": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "domain_name": {
                    "type": "string"
                },
                "group": {
                    "type": "string"
                },
                "help": {
                    "type": "string"
                },
                "invokes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_executable_in_dm": {
                    "type": "boolean"
                },
                "sub_permission_rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/shireikan.SubPermission"
                    }
                }
            }
        },
        "models.Count": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                }
            }
        },
        "models.EnableStatus": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "models.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "context": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "models.FlushGuildRequest": {
            "type": "object",
            "properties": {
                "leave_after": {
                    "type": "boolean"
                },
                "validation": {
                    "type": "string"
                }
            }
        },
        "models.Guild": {
            "type": "object",
            "properties": {
                "afk_channel_id": {
                    "type": "string"
                },
                "backups_enabled": {
                    "type": "boolean"
                },
                "banner": {
                    "type": "string"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/discordgo.Channel"
                    }
                },
                "description": {
                    "type": "string"
                },
                "icon": {
                    "type": "string"
                },
                "icon_url": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invite_block_enabled": {
                    "type": "boolean"
                },
                "joined_at": {
                    "type": "string"
                },
                "large": {
                    "type": "boolean"
                },
                "latest_backup_entry": {
                    "type": "string"
                },
                "member_count": {
                    "type": "integer"
                },
                "mfa_level": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "premium_subscription_count": {
                    "type": "integer"
                },
                "premium_tier": {
                    "type": "integer"
                },
                "region": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/discordgo.Role"
                    }
                },
                "self_member": {
                    "$ref": "#/definitions/models.Member"
                },
                "splash": {
                    "type": "string"
                },
                "unavailable": {
                    "type": "boolean"
                },
                "verification_level": {
                    "type": "integer"
                }
            }
        },
        "models.GuildKarmaEntry": {
            "type": "object",
            "properties": {
                "member": {
                    "$ref": "#/definitions/models.Member"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "models.GuildLogEntry": {
            "type": "object",
            "properties": {
                "guildid": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "module": {
                    "type": "string"
                },
                "severity": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "models.GuildReduced": {
            "type": "object",
            "properties": {
                "icon": {
                    "type": "string"
                },
                "icon_url": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "joined_at": {
                    "type": "string"
                },
                "member_count": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                }
            }
        },
        "models.GuildSettings": {
            "type": "object",
            "properties": {
                "autoroles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "joinmessagechannel": {
                    "type": "string"
                },
                "joinmessagetext": {
                    "type": "string"
                },
                "leavemessagechannel": {
                    "type": "string"
                },
                "leavemessagetext": {
                    "type": "string"
                },
                "modlogchannel": {
                    "type": "string"
                },
                "perms": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "prefix": {
                    "type": "string"
                },
                "voicelogchannel": {
                    "type": "string"
                }
            }
        },
        "models.InviteSettingsRequest": {
            "type": "object",
            "properties": {
                "guild_id": {
                    "type": "string"
                },
                "invite_code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.InviteSettingsResponse": {
            "type": "object",
            "properties": {
                "guild": {
                    "$ref": "#/definitions/models.Guild"
                },
                "invite_url": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.JoinLogEntry": {
            "type": "object",
            "properties": {
                "guild_id": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.KarmaRule": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "argument": {
                    "type": "string"
                },
                "guildid": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "trigger": {
                    "type": "integer"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "models.KarmaSettings": {
            "type": "object",
            "properties": {
                "emotes_decrease": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "emotes_increase": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "penalty": {
                    "type": "boolean"
                },
                "state": {
                    "type": "boolean"
                },
                "tokens": {
                    "type": "integer"
                }
            }
        },
        "models.LandingPageResponse": {
            "type": "object",
            "properties": {
                "localinvite": {
                    "type": "string"
                },
                "publiccaranyinvite": {
                    "type": "string"
                },
                "publicmaininvite": {
                    "type": "string"
                }
            }
        },
        "models.Member": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "chat_muted": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "deaf": {
                    "description": "Whether the member is deafened at a guild level.",
                    "type": "boolean"
                },
                "dominance": {
                    "type": "integer"
                },
                "guild_id": {
                    "description": "The guild ID on which the member exists.",
                    "type": "string"
                },
                "joined_at": {
                    "description": "The time at which the member joined the guild, in ISO8601.",
                    "type": "string"
                },
                "karma": {
                    "type": "integer"
                },
                "karma_total": {
                    "type": "integer"
                },
                "mute": {
                    "description": "Whether the member is muted at a guild level.",
                    "type": "boolean"
                },
                "nick": {
                    "description": "The nickname of the member, if they have one.",
                    "type": "string"
                },
                "pending": {
                    "description": "Is true while the member hasn't accepted the membership screen.",
                    "type": "boolean"
                },
                "premium_since": {
                    "description": "When the user used their Nitro boost on the server",
                    "type": "string"
                },
                "roles": {
                    "description": "A list of IDs of the roles which are possessed by the member.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user": {
                    "description": "The underlying user on which the member is based.",
                    "$ref": "#/definitions/discordgo.User"
                }
            }
        },
        "models.PermissionsMap": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            }
        },
        "models.PermissionsUpdate": {
            "type": "object",
            "properties": {
                "perm": {
                    "type": "string"
                },
                "role_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.ReasonRequest": {
            "type": "object",
            "properties": {
                "attachment": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "timeout": {
                    "type": "string"
                }
            }
        },
        "models.Report": {
            "type": "object",
            "properties": {
                "attachment_url": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "executor_id": {
                    "type": "string"
                },
                "guild_id": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "timeout": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                },
                "type_name": {
                    "type": "string"
                },
                "victim_id": {
                    "type": "string"
                }
            }
        },
        "models.StarboardEntryResponse": {
            "type": "object",
            "properties": {
                "author_avatar_url": {
                    "type": "string"
                },
                "author_id": {
                    "type": "string"
                },
                "author_username": {
                    "type": "string"
                },
                "channel_id": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "guild_id": {
                    "type": "string"
                },
                "media_urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message_id": {
                    "type": "string"
                },
                "message_url": {
                    "type": "string"
                },
                "score": {
                    "type": "integer"
                },
                "starboard_id": {
                    "type": "string"
                }
            }
        },
        "models.State": {
            "type": "object",
            "properties": {
                "state": {
                    "type": "boolean"
                }
            }
        },
        "models.Status": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                }
            }
        },
        "models.SystemInfo": {
            "type": "object",
            "properties": {
                "arch": {
                    "type": "string"
                },
                "bot_invite": {
                    "type": "string"
                },
                "bot_user_id": {
                    "type": "string"
                },
                "build_date": {
                    "type": "string"
                },
                "commit_hash": {
                    "type": "string"
                },
                "cpus": {
                    "type": "integer"
                },
                "go_routines": {
                    "type": "integer"
                },
                "go_version": {
                    "type": "string"
                },
                "guilds": {
                    "type": "integer"
                },
                "heap_use": {
                    "type": "integer"
                },
                "heap_use_str": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                },
                "stack_use": {
                    "type": "integer"
                },
                "stack_use_str": {
                    "type": "string"
                },
                "uptime": {
                    "type": "integer"
                },
                "uptime_str": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.UnbanRequest": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "guild_id": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "processed": {
                    "type": "string"
                },
                "processed_by": {
                    "type": "string"
                },
                "processed_message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                },
                "user_tag": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "avatar": {
                    "description": "The hash of the user's avatar. Use Session.UserAvatar\nto retrieve the avatar itself.",
                    "type": "string"
                },
                "avatar_url": {
                    "type": "string"
                },
                "bot": {
                    "description": "Whether the user is a bot.",
                    "type": "boolean"
                },
                "bot_owner": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "discriminator": {
                    "description": "The discriminator of the user (4 numbers after name).",
                    "type": "string"
                },
                "email": {
                    "description": "The email of the user. This is only present when\nthe application possesses the email scope for the user.",
                    "type": "string"
                },
                "flags": {
                    "description": "The flags on a user's account.\nOnly available when the request is authorized via a Bearer token.",
                    "type": "integer"
                },
                "id": {
                    "description": "The ID of the user.",
                    "type": "string"
                },
                "locale": {
                    "description": "The user's chosen language option.",
                    "type": "string"
                },
                "mfa_enabled": {
                    "description": "Whether the user has multi-factor authentication enabled.",
                    "type": "boolean"
                },
                "premium_type": {
                    "description": "The type of Nitro subscription on a user's account.\nOnly available when the request is authorized via a Bearer token.",
                    "type": "integer"
                },
                "public_flags": {
                    "description": "The public flags on a user's account.\nThis is a combination of bit masks; the presence of a certain flag can\nbe checked by performing a bitwise AND between this int and the flag.",
                    "type": "integer"
                },
                "system": {
                    "description": "Whether the user is an Official Discord System user (part of the urgent message system).",
                    "type": "boolean"
                },
                "token": {
                    "description": "The token of the user. This is only present for\nthe user represented by the current session.",
                    "type": "string"
                },
                "username": {
                    "description": "The user's username.",
                    "type": "string"
                },
                "verified": {
                    "description": "Whether the user's email is verified.",
                    "type": "boolean"
                }
            }
        },
        "presence.Presence": {
            "type": "object",
            "properties": {
                "game": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "shireikan.SubPermission": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "explicit": {
                    "type": "boolean"
                },
                "term": {
                    "type": "string"
                }
            }
        }
    }
}