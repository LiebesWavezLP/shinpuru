basePath: /api/v1
definitions:
  backupmodels.Entry:
    properties:
      file_id:
        type: string
      guild_id:
        type: string
      timestamp:
        type: string
    type: object
  discordgo.Channel:
    properties:
      application_id:
        description: ApplicationID of the DM creator Zeroed if guild channel or not
          a bot user
        type: string
      bitrate:
        description: The bitrate of the channel, if it is a voice channel.
        type: integer
      guild_id:
        description: |-
          The ID of the guild to which the channel belongs, if it is in a guild.
          Else, this ID is empty (e.g. DM channels).
        type: string
      icon:
        description: Icon of the group DM channel.
        type: string
      id:
        description: The ID of the channel.
        type: string
      last_message_id:
        description: |-
          The ID of the last message sent in the channel. This is not
          guaranteed to be an ID of a valid message.
        type: string
      last_pin_timestamp:
        description: |-
          The timestamp of the last pinned message in the channel.
          Empty if the channel has no pinned messages.
        type: string
      name:
        description: The name of the channel.
        type: string
      nsfw:
        description: Whether the channel is marked as NSFW.
        type: boolean
      owner_id:
        description: ID of the DM creator Zeroed if guild channel
        type: string
      parent_id:
        description: The ID of the parent channel, if the channel is under a category
        type: string
      permission_overwrites:
        description: A list of permission overwrites present for the channel.
        items:
          $ref: '#/definitions/discordgo.PermissionOverwrite'
        type: array
      position:
        description: The position of the channel, used for sorting in client.
        type: integer
      rate_limit_per_user:
        description: |-
          Amount of seconds a user has to wait before sending another message (0-21600)
          bots, as well as users with the permission manage_messages or manage_channel, are unaffected
        type: integer
      recipients:
        description: The recipients of the channel. This is only populated in DM channels.
        items:
          $ref: '#/definitions/discordgo.User'
        type: array
      topic:
        description: The topic of the channel.
        type: string
      type:
        description: The type of the channel.
        type: integer
      user_limit:
        description: The user limit of the voice channel.
        type: integer
    type: object
  discordgo.PermissionOverwrite:
    properties:
      allow:
        example: "0"
        type: string
      deny:
        example: "0"
        type: string
      id:
        type: string
      type:
        type: integer
    type: object
  discordgo.Role:
    properties:
      color:
        description: The hex color of this role.
        type: integer
      hoist:
        description: Whether this role is hoisted (shows up separately in member list).
        type: boolean
      id:
        description: The ID of the role.
        type: string
      managed:
        description: |-
          Whether this role is managed by an integration, and
          thus cannot be manually added to, or taken from, members.
        type: boolean
      mentionable:
        description: Whether this role is mentionable.
        type: boolean
      name:
        description: The name of the role.
        type: string
      permissions:
        description: |-
          The permissions of the role on the guild (doesn't include channel overrides).
          This is a combination of bit masks; the presence of a certain permission can
          be checked by performing a bitwise AND between this int and the permission.
        example: "0"
        type: string
      position:
        description: The position of this role in the guild's role hierarchy.
        type: integer
    type: object
  discordgo.User:
    properties:
      avatar:
        description: |-
          The hash of the user's avatar. Use Session.UserAvatar
          to retrieve the avatar itself.
        type: string
      bot:
        description: Whether the user is a bot.
        type: boolean
      discriminator:
        description: The discriminator of the user (4 numbers after name).
        type: string
      email:
        description: |-
          The email of the user. This is only present when
          the application possesses the email scope for the user.
        type: string
      flags:
        description: |-
          The flags on a user's account.
          Only available when the request is authorized via a Bearer token.
        type: integer
      id:
        description: The ID of the user.
        type: string
      locale:
        description: The user's chosen language option.
        type: string
      mfa_enabled:
        description: Whether the user has multi-factor authentication enabled.
        type: boolean
      premium_type:
        description: |-
          The type of Nitro subscription on a user's account.
          Only available when the request is authorized via a Bearer token.
        type: integer
      public_flags:
        description: |-
          The public flags on a user's account.
          This is a combination of bit masks; the presence of a certain flag can
          be checked by performing a bitwise AND between this int and the flag.
        type: integer
      system:
        description: Whether the user is an Official Discord System user (part of
          the urgent message system).
        type: boolean
      token:
        description: |-
          The token of the user. This is only present for
          the user represented by the current session.
        type: string
      username:
        description: The user's username.
        type: string
      verified:
        description: Whether the user's email is verified.
        type: boolean
    type: object
  models.APITokenResponse:
    properties:
      created:
        type: string
      expires:
        type: string
      hits:
        type: integer
      last_access:
        type: string
      token:
        type: string
    type: object
  models.AccessTokenResponse:
    properties:
      expires:
        type: string
      token:
        type: string
    type: object
  models.AntiraidSettings:
    properties:
      burst:
        type: integer
      regeneration_period:
        type: integer
      state:
        type: boolean
    type: object
  models.CommandInfo:
    properties:
      description:
        type: string
      domain_name:
        type: string
      group:
        type: string
      help:
        type: string
      invokes:
        items:
          type: string
        type: array
      is_executable_in_dm:
        type: boolean
      sub_permission_rules:
        items:
          $ref: '#/definitions/shireikan.SubPermission'
        type: array
    type: object
  models.Count:
    properties:
      count:
        type: integer
    type: object
  models.EnableStatus:
    properties:
      enabled:
        type: boolean
    type: object
  models.Error:
    properties:
      code:
        type: integer
      context:
        type: string
      error:
        type: string
    type: object
  models.FlushGuildRequest:
    properties:
      leave_after:
        type: boolean
      validation:
        type: string
    type: object
  models.Guild:
    properties:
      afk_channel_id:
        type: string
      backups_enabled:
        type: boolean
      banner:
        type: string
      channels:
        items:
          $ref: '#/definitions/discordgo.Channel'
        type: array
      description:
        type: string
      icon:
        type: string
      icon_url:
        type: string
      id:
        type: string
      invite_block_enabled:
        type: boolean
      joined_at:
        type: string
      large:
        type: boolean
      latest_backup_entry:
        type: string
      member_count:
        type: integer
      mfa_level:
        type: integer
      name:
        type: string
      owner_id:
        type: string
      premium_subscription_count:
        type: integer
      premium_tier:
        type: integer
      region:
        type: string
      roles:
        items:
          $ref: '#/definitions/discordgo.Role'
        type: array
      self_member:
        $ref: '#/definitions/models.Member'
      splash:
        type: string
      unavailable:
        type: boolean
      verification_level:
        type: integer
    type: object
  models.GuildKarmaEntry:
    properties:
      member:
        $ref: '#/definitions/models.Member'
      value:
        type: integer
    type: object
  models.GuildLogEntry:
    properties:
      guildid:
        type: string
      id:
        type: integer
      message:
        type: string
      module:
        type: string
      severity:
        type: integer
      timestamp:
        type: string
    type: object
  models.GuildReduced:
    properties:
      icon:
        type: string
      icon_url:
        type: string
      id:
        type: string
      joined_at:
        type: string
      member_count:
        type: integer
      name:
        type: string
      owner_id:
        type: string
      region:
        type: string
    type: object
  models.GuildSettings:
    properties:
      autoroles:
        items:
          type: string
        type: array
      joinmessagechannel:
        type: string
      joinmessagetext:
        type: string
      leavemessagechannel:
        type: string
      leavemessagetext:
        type: string
      modlogchannel:
        type: string
      perms:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      prefix:
        type: string
      voicelogchannel:
        type: string
    type: object
  models.InviteSettingsRequest:
    properties:
      guild_id:
        type: string
      invite_code:
        type: string
      message:
        type: string
    type: object
  models.InviteSettingsResponse:
    properties:
      guild:
        $ref: '#/definitions/models.Guild'
      invite_url:
        type: string
      message:
        type: string
    type: object
  models.JoinLogEntry:
    properties:
      guild_id:
        type: string
      tag:
        type: string
      timestamp:
        type: string
      user_id:
        type: string
    type: object
  models.KarmaRule:
    properties:
      action:
        type: string
      argument:
        type: string
      guildid:
        type: string
      id:
        type: integer
      trigger:
        type: integer
      value:
        type: integer
    type: object
  models.KarmaSettings:
    properties:
      emotes_decrease:
        items:
          type: string
        type: array
      emotes_increase:
        items:
          type: string
        type: array
      penalty:
        type: boolean
      state:
        type: boolean
      tokens:
        type: integer
    type: object
  models.LandingPageResponse:
    properties:
      localinvite:
        type: string
      publiccaranyinvite:
        type: string
      publicmaininvite:
        type: string
    type: object
  models.Member:
    properties:
      avatar_url:
        type: string
      chat_muted:
        type: boolean
      created_at:
        type: string
      deaf:
        description: Whether the member is deafened at a guild level.
        type: boolean
      dominance:
        type: integer
      guild_id:
        description: The guild ID on which the member exists.
        type: string
      joined_at:
        description: The time at which the member joined the guild, in ISO8601.
        type: string
      karma:
        type: integer
      karma_total:
        type: integer
      mute:
        description: Whether the member is muted at a guild level.
        type: boolean
      nick:
        description: The nickname of the member, if they have one.
        type: string
      pending:
        description: Is true while the member hasn't accepted the membership screen.
        type: boolean
      premium_since:
        description: When the user used their Nitro boost on the server
        type: string
      roles:
        description: A list of IDs of the roles which are possessed by the member.
        items:
          type: string
        type: array
      user:
        $ref: '#/definitions/discordgo.User'
        description: The underlying user on which the member is based.
    type: object
  models.PermissionsMap:
    additionalProperties:
      items:
        type: string
      type: array
    type: object
  models.PermissionsUpdate:
    properties:
      perm:
        type: string
      role_ids:
        items:
          type: string
        type: array
    type: object
  models.ReasonRequest:
    properties:
      attachment:
        type: string
      reason:
        type: string
      timeout:
        type: string
    type: object
  models.Report:
    properties:
      attachment_url:
        type: string
      created:
        type: string
      executor_id:
        type: string
      guild_id:
        type: string
      id:
        type: integer
      message:
        type: string
      timeout:
        type: string
      type:
        type: integer
      type_name:
        type: string
      victim_id:
        type: string
    type: object
  models.ReportRequest:
    properties:
      attachment:
        type: string
      reason:
        type: string
      timeout:
        type: string
      type:
        type: integer
    type: object
  models.StarboardEntryResponse:
    properties:
      author_avatar_url:
        type: string
      author_id:
        type: string
      author_username:
        type: string
      channel_id:
        type: string
      content:
        type: string
      guild_id:
        type: string
      media_urls:
        items:
          type: string
        type: array
      message_id:
        type: string
      message_url:
        type: string
      score:
        type: integer
      starboard_id:
        type: string
    type: object
  models.State:
    properties:
      state:
        type: boolean
    type: object
  models.Status:
    properties:
      code:
        type: integer
    type: object
  models.SystemInfo:
    properties:
      arch:
        type: string
      bot_invite:
        type: string
      bot_user_id:
        type: string
      build_date:
        type: string
      commit_hash:
        type: string
      cpus:
        type: integer
      go_routines:
        type: integer
      go_version:
        type: string
      guilds:
        type: integer
      heap_use:
        type: integer
      heap_use_str:
        type: string
      os:
        type: string
      stack_use:
        type: integer
      stack_use_str:
        type: string
      uptime:
        type: integer
      uptime_str:
        type: string
      version:
        type: string
    type: object
  models.UnbanRequest:
    properties:
      created:
        type: string
      guild_id:
        type: string
      id:
        type: integer
      message:
        type: string
      processed:
        type: string
      processed_by:
        type: string
      processed_message:
        type: string
      status:
        type: integer
      user_id:
        type: string
      user_tag:
        type: string
    type: object
  models.User:
    properties:
      avatar:
        description: |-
          The hash of the user's avatar. Use Session.UserAvatar
          to retrieve the avatar itself.
        type: string
      avatar_url:
        type: string
      bot:
        description: Whether the user is a bot.
        type: boolean
      bot_owner:
        type: boolean
      created_at:
        type: string
      discriminator:
        description: The discriminator of the user (4 numbers after name).
        type: string
      email:
        description: |-
          The email of the user. This is only present when
          the application possesses the email scope for the user.
        type: string
      flags:
        description: |-
          The flags on a user's account.
          Only available when the request is authorized via a Bearer token.
        type: integer
      id:
        description: The ID of the user.
        type: string
      locale:
        description: The user's chosen language option.
        type: string
      mfa_enabled:
        description: Whether the user has multi-factor authentication enabled.
        type: boolean
      premium_type:
        description: |-
          The type of Nitro subscription on a user's account.
          Only available when the request is authorized via a Bearer token.
        type: integer
      public_flags:
        description: |-
          The public flags on a user's account.
          This is a combination of bit masks; the presence of a certain flag can
          be checked by performing a bitwise AND between this int and the flag.
        type: integer
      system:
        description: Whether the user is an Official Discord System user (part of
          the urgent message system).
        type: boolean
      token:
        description: |-
          The token of the user. This is only present for
          the user represented by the current session.
        type: string
      username:
        description: The user's username.
        type: string
      verified:
        description: Whether the user's email is verified.
        type: boolean
    type: object
  models.UsersettingsOTA:
    properties:
      enabled:
        type: boolean
    type: object
  presence.Presence:
    properties:
      game:
        type: string
      status:
        type: string
    type: object
  shireikan.SubPermission:
    properties:
      description:
        type: string
      explicit:
        type: boolean
      term:
        type: string
    type: object
info:
  contact: {}
  description: The shinpuru main REST API.
  title: shinpuru main API
  version: "1.0"
paths:
  /auth/accesstoken:
    post:
      consumes:
      - application/json
      description: Exchanges the cookie-passed refresh token with a generated access
        token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AccessTokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: Access Token Exchange
  /auth/check:
    get:
      consumes:
      - application/json
      description: Returns OK if the request is authorized.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: Authorization Check
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Reovkes the currently used access token and clears the refresh
        token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
      summary: Logout
  /guilds:
    get:
      consumes:
      - application/json
      description: Returns a list of guilds the authenticated user has in common with
        shinpuru.
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.GuildReduced'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: List Guilds
  /guilds/:id:
    get:
      consumes:
      - application/json
      description: Returns a single guild object by it's ID.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Guild'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild
  /guilds/:id/:memberid/ban:
    post:
      consumes:
      - application/json
      description: Creates a member ban report.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the victim member.
        in: path
        name: memberid
        required: true
        type: string
      - description: The report payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.ReasonRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Report'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Create A Member Ban Report
  /guilds/:id/:memberid/kick:
    post:
      consumes:
      - application/json
      description: Creates a member kick report.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the victim member.
        in: path
        name: memberid
        required: true
        type: string
      - description: The report payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.ReasonRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Report'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Create A Member Kick Report
  /guilds/:id/:memberid/mute:
    post:
      consumes:
      - application/json
      description: Unmute a muted member.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the victim member.
        in: path
        name: memberid
        required: true
        type: string
      - description: The unmute payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.ReasonRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Unmute A Member
  /guilds/:id/:memberid/reports:
    post:
      consumes:
      - application/json
      description: Creates a member report.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the victim member.
        in: path
        name: memberid
        required: true
        type: string
      - description: The report payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.ReportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Report'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Create A Member Report
  /guilds/:id/antiraid/joinlog:
    delete:
      consumes:
      - application/json
      description: Deletes all entries of the antiraid joinlog.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Reset Antiraid Joinlog
    get:
      consumes:
      - application/json
      description: Returns a list of joined members during an antiraid trigger.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.JoinLogEntry'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Antiraid Joinlog
  /guilds/:id/backups:
    get:
      consumes:
      - application/json
      description: Returns a list of guild backups.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/backupmodels.Entry'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Backups
  /guilds/:id/backups/:backupid/download:
    get:
      consumes:
      - application/json
      description: Download a single gziped backup file.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the backup.
        in: path
        name: backupid
        required: true
        type: string
      - description: The previously obtained OTA token to authorize the download.
        in: query
        name: ota_token
        required: true
        type: string
      produces:
      - application/gzip
      responses:
        "200":
          description: OK
          schema:
            type: data
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Download Backup File
    post:
      consumes:
      - application/json
      description: Returns an OTA key which is used to download a backup entry.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the backup.
        in: path
        name: backupid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AccessTokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Obtain Backup Download OTA Key
  /guilds/:id/backups/toggle:
    post:
      consumes:
      - application/json
      description: Toggle guild backup enable state.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: Enable state payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.EnableStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Toggle Guild Backup Enable
  /guilds/:id/inviteblock:
    post:
      consumes:
      - application/json
      description: Toggle enabled state of the guild invite block system.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The enable status payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.EnableStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Toggle Guild Inviteblock Enable
  /guilds/:id/permissions:
    get:
      consumes:
      - application/json
      description: Returns the specified guild permission settings.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PermissionsMap'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Permission Settings
    post:
      consumes:
      - application/json
      description: Apply a new guild permission rule for a specified role.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The permission rule payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.PermissionsUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Apply Guild Permission Rule
  /guilds/:id/reports:
    get:
      consumes:
      - application/json
      description: Returns a list of guild modlog entries for the given guild.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - default: 0
        description: The offset of returned entries
        in: query
        name: offset
        type: integer
      - default: 0
        description: The amount of returned entries (0 = all)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.Report'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Modlog
  /guilds/:id/reports/count:
    get:
      consumes:
      - application/json
      description: Returns the total count of entries in the guild mod log.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Count'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Modlog Count
  /guilds/:id/scoreboard:
    get:
      consumes:
      - application/json
      description: Returns a list of scoreboard entries for the given guild.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - default: 25
        description: Limit the amount of result values
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.GuildKarmaEntry'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Scoreboard
  /guilds/:id/settings:
    get:
      consumes:
      - application/json
      description: Returns the specified general guild settings.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GuildSettings'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Settings
    post:
      consumes:
      - application/json
      description: Returns the specified general guild settings.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: Modified guild settings payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.GuildSettings'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Settings
  /guilds/:id/settings/antiraid:
    get:
      consumes:
      - application/json
      description: Returns the specified guild antiraid settings.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AntiraidSettings'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Antiraid Settings
    post:
      consumes:
      - application/json
      description: Update the guild antiraid settings specification.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The guild antiraid settings payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.AntiraidSettings'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Update Guild Antiraid Settings
  /guilds/:id/settings/flushguilddata:
    post:
      consumes:
      - application/json
      description: Flushes all guild data from the database.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The guild flush payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.FlushGuildRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.State'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Flush Guild Data
  /guilds/:id/settings/karma:
    get:
      consumes:
      - application/json
      description: Returns the specified guild karma settings.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.KarmaSettings'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Karma Settings
    post:
      consumes:
      - application/json
      description: Update the guild karma settings specification.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The guild karma settings payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.KarmaSettings'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Update Guild Karma Settings
  /guilds/:id/settings/karma/blocklist:
    get:
      consumes:
      - application/json
      description: Returns the specified guild karma blocklist entries.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.Member'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Karma Blocklist
  /guilds/:id/settings/karma/blocklist/:memberid:
    delete:
      consumes:
      - application/json
      description: Remove a guild karma blocklist entry.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the guild.
        in: path
        name: memberid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Remove Guild Karma Blocklist Entry
    put:
      consumes:
      - application/json
      description: Add a guild karma blocklist entry.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the guild.
        in: path
        name: memberid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Add Guild Karma Blocklist Entry
  /guilds/:id/settings/karma/rules:
    get:
      consumes:
      - application/json
      description: Returns a list of specified guild karma rules.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.KarmaRule'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Settings Karma Rules
    post:
      consumes:
      - application/json
      description: Create a guild karma rule.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The karma rule payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.KarmaRule'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.KarmaRule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Create Guild Settings Karma
  /guilds/:id/settings/karma/rules/:ruleid:
    delete:
      consumes:
      - application/json
      description: Remove a guild karma rule by ID.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the rule.
        in: path
        name: ruleid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.State'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Remove Guild Settings Karma
    post:
      consumes:
      - application/json
      description: Update a karma rule by ID.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the rule.
        in: path
        name: ruleid
        required: true
        type: string
      - description: The karma rule update payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.KarmaRule'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.KarmaRule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Update Guild Settings Karma
  /guilds/:id/settings/logs:
    get:
      consumes:
      - application/json
      description: Returns the total or filtered count of guild log entries.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Count'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Log Count
  /guilds/:id/settings/logs/state:
    get:
      consumes:
      - application/json
      description: Returns the enabled state of the guild log setting.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.State'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Settings Log State
    post:
      consumes:
      - application/json
      description: Update the enabled state of the log state guild setting.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The state payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.State'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.State'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Update Guild Settings Log State
  /guilds/:id/settings/logs/state/:entryid:
    delete:
      consumes:
      - application/json
      description: Delete a single or all guild log entries.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the entry to be deleted.
        in: path
        name: entryid
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.State'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Delete Guild Log Entries
  /guilds/:id/starboard:
    get:
      consumes:
      - application/json
      description: Returns a list of starboard entries for the given guild.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.StarboardEntryResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Starboard
  /guilds/:id/unbanrequests:
    get:
      consumes:
      - application/json
      description: Returns the list of the guild unban requests.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListReponse
          schema:
            items:
              $ref: '#/definitions/models.UnbanRequest'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Unbanrequests
  /guilds/:id/unbanrequests/:requestid:
    get:
      consumes:
      - application/json
      description: Returns a single guild unban request by ID.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the unbanrequest.
        in: path
        name: requestid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UnbanRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Single Guild Unbanrequest
    post:
      consumes:
      - application/json
      description: Process a guild unban request.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the unbanrequest.
        in: path
        name: requestid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UnbanRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Process Guild Unbanrequest
  /guilds/:id/unbanrequests/count:
    get:
      consumes:
      - application/json
      description: Returns the total or filtered count of guild unban requests.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Count'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Unbanrequests Count
  /me:
    get:
      consumes:
      - application/json
      description: Returns the user object of the currently authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Me
  /ota:
    get:
      consumes:
      - application/json
      description: Logs in the current browser session by using the passed pre-obtained
        OTA token.
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: OTA Login
  /reports/:id:
    get:
      consumes:
      - application/json
      description: Returns a single report object by its ID.
      parameters:
      - description: The report ID.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Report'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Report
  /reports/:id/revoke:
    post:
      consumes:
      - application/json
      description: Revokes a given report by ID.
      parameters:
      - description: The report ID.
        in: path
        name: id
        required: true
        type: string
      - description: The revoke reason payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.ReasonRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Report'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Revoke Report
  /settings/noguildinvite:
    get:
      consumes:
      - application/json
      description: Returns the settings status for the suggested guild invite when
        the logged in user is not on any guild with shinpuru.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.InviteSettingsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "409":
          description: Returned when no channel could be found to create invite for.
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get No Guild Invites Status
    post:
      consumes:
      - application/json
      description: Set the status for the suggested guild invite when the logged in
        user is not on any guild with shinpuru.
      parameters:
      - description: Invite Settings Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.InviteSettingsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APITokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "409":
          description: Returned when no channel could be found to create invite for.
          schema:
            $ref: '#/definitions/models.Error'
      summary: Set No Guild Invites Status
  /settings/presence:
    get:
      consumes:
      - application/json
      description: Returns the bot's displayed presence status.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presence.Presence'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Presence
    post:
      consumes:
      - application/json
      description: Set the bot's displayed presence status.
      parameters:
      - description: Presence Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/presence.Presence'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APITokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Is returned when no token was generated before.
          schema:
            $ref: '#/definitions/models.Error'
      summary: Set Presence
  /sysinfo:
    get:
      consumes:
      - application/json
      description: Returns general global system information.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SystemInfo'
      summary: System Information
  /token:
    delete:
      consumes:
      - application/json
      description: Invalidates the currently generated API token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: API Token Deletion
    get:
      consumes:
      - application/json
      description: Returns general metadata information about a generated API token.
        The response does **not** contain the actual token!
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APITokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Is returned when no token was generated before.
          schema:
            $ref: '#/definitions/models.Error'
      summary: API Token Info
    post:
      consumes:
      - application/json
      description: (Re-)Generates and returns general metadata information about an
        API token **including** the actual API token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APITokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: API Token Generation
  /unbanrequests:
    get:
      consumes:
      - application/json
      description: Returns a list of unban requests created by the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.UnbanRequest'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Unban Requests
    post:
      consumes:
      - application/json
      description: Create an unban reuqest.
      parameters:
      - description: The unban request payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.UnbanRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UnbanRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Create Unban Requests
  /unbanrequests/bannedguilds:
    get:
      consumes:
      - application/json
      description: Returns a list of guilds where the currently authenticated user
        is banned.
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.GuildReduced'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Banned Guilds
  /usersettings/ota:
    get:
      consumes:
      - application/json
      description: Returns the current state of the OTA user setting.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UsersettingsOTA'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get OTA Usersettings State
    post:
      consumes:
      - application/json
      description: Update the OTA user settings state.
      parameters:
      - description: The OTA settings payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.UsersettingsOTA'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UsersettingsOTA'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Update OTA Usersettings State
  /util/color/:hexcode:
    get:
      consumes:
      - application/json
      description: Produces a square image of the given color and size.
      parameters:
      - description: Hex Code of the Color to produce
        in: path
        name: hexcode
        required: true
        type: string
      - default: 24
        description: The dimension of the square image
        in: query
        name: size
        type: integer
      produces:
      - image/png
      responses:
        "200":
          description: OK
          schema:
            type: data
      summary: Color Generator
  /util/commands:
    get:
      consumes:
      - application/json
      description: Returns a list of registered commands and their description.
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.CommandInfo'
            type: array
      summary: Command List
  /util/landingpageinfo:
    get:
      consumes:
      - application/json
      description: Returns general information for the landing page like the local
        invite parameters.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LandingPageResponse'
      summary: Landing Page Info
swagger: "2.0"
