basePath: /api/v1
definitions:
  discordgo.Channel:
    properties:
      application_id:
        description: ApplicationID of the DM creator Zeroed if guild channel or not
          a bot user
        type: string
      bitrate:
        description: The bitrate of the channel, if it is a voice channel.
        type: integer
      guild_id:
        description: |-
          The ID of the guild to which the channel belongs, if it is in a guild.
          Else, this ID is empty (e.g. DM channels).
        type: string
      icon:
        description: Icon of the group DM channel.
        type: string
      id:
        description: The ID of the channel.
        type: string
      last_message_id:
        description: |-
          The ID of the last message sent in the channel. This is not
          guaranteed to be an ID of a valid message.
        type: string
      last_pin_timestamp:
        description: |-
          The timestamp of the last pinned message in the channel.
          Empty if the channel has no pinned messages.
        type: string
      name:
        description: The name of the channel.
        type: string
      nsfw:
        description: Whether the channel is marked as NSFW.
        type: boolean
      owner_id:
        description: ID of the DM creator Zeroed if guild channel
        type: string
      parent_id:
        description: The ID of the parent channel, if the channel is under a category
        type: string
      permission_overwrites:
        description: A list of permission overwrites present for the channel.
        items:
          $ref: '#/definitions/discordgo.PermissionOverwrite'
        type: array
      position:
        description: The position of the channel, used for sorting in client.
        type: integer
      rate_limit_per_user:
        description: |-
          Amount of seconds a user has to wait before sending another message (0-21600)
          bots, as well as users with the permission manage_messages or manage_channel, are unaffected
        type: integer
      recipients:
        description: The recipients of the channel. This is only populated in DM channels.
        items:
          $ref: '#/definitions/discordgo.User'
        type: array
      topic:
        description: The topic of the channel.
        type: string
      type:
        description: The type of the channel.
        type: integer
      user_limit:
        description: The user limit of the voice channel.
        type: integer
    type: object
  discordgo.PermissionOverwrite:
    properties:
      allow:
        example: "0"
        type: string
      deny:
        example: "0"
        type: string
      id:
        type: string
      type:
        type: integer
    type: object
  discordgo.Role:
    properties:
      color:
        description: The hex color of this role.
        type: integer
      hoist:
        description: Whether this role is hoisted (shows up separately in member list).
        type: boolean
      id:
        description: The ID of the role.
        type: string
      managed:
        description: |-
          Whether this role is managed by an integration, and
          thus cannot be manually added to, or taken from, members.
        type: boolean
      mentionable:
        description: Whether this role is mentionable.
        type: boolean
      name:
        description: The name of the role.
        type: string
      permissions:
        description: |-
          The permissions of the role on the guild (doesn't include channel overrides).
          This is a combination of bit masks; the presence of a certain permission can
          be checked by performing a bitwise AND between this int and the permission.
        example: "0"
        type: string
      position:
        description: The position of this role in the guild's role hierarchy.
        type: integer
    type: object
  discordgo.User:
    properties:
      avatar:
        description: |-
          The hash of the user's avatar. Use Session.UserAvatar
          to retrieve the avatar itself.
        type: string
      bot:
        description: Whether the user is a bot.
        type: boolean
      discriminator:
        description: The discriminator of the user (4 numbers after name).
        type: string
      email:
        description: |-
          The email of the user. This is only present when
          the application possesses the email scope for the user.
        type: string
      flags:
        description: |-
          The flags on a user's account.
          Only available when the request is authorized via a Bearer token.
        type: integer
      id:
        description: The ID of the user.
        type: string
      locale:
        description: The user's chosen language option.
        type: string
      mfa_enabled:
        description: Whether the user has multi-factor authentication enabled.
        type: boolean
      premium_type:
        description: |-
          The type of Nitro subscription on a user's account.
          Only available when the request is authorized via a Bearer token.
        type: integer
      public_flags:
        description: |-
          The public flags on a user's account.
          This is a combination of bit masks; the presence of a certain flag can
          be checked by performing a bitwise AND between this int and the flag.
        type: integer
      system:
        description: Whether the user is an Official Discord System user (part of
          the urgent message system).
        type: boolean
      token:
        description: |-
          The token of the user. This is only present for
          the user represented by the current session.
        type: string
      username:
        description: The user's username.
        type: string
      verified:
        description: Whether the user's email is verified.
        type: boolean
    type: object
  models.APITokenResponse:
    properties:
      created:
        type: string
      expires:
        type: string
      hits:
        type: integer
      last_access:
        type: string
      token:
        type: string
    type: object
  models.AccessTokenResponse:
    properties:
      expires:
        type: string
      token:
        type: string
    type: object
  models.CommandInfo:
    properties:
      description:
        type: string
      domain_name:
        type: string
      group:
        type: string
      help:
        type: string
      invokes:
        items:
          type: string
        type: array
      is_executable_in_dm:
        type: boolean
      sub_permission_rules:
        items:
          $ref: '#/definitions/shireikan.SubPermission'
        type: array
    type: object
  models.Error:
    properties:
      code:
        type: integer
      context:
        type: string
      error:
        type: string
    type: object
  models.Guild:
    properties:
      afk_channel_id:
        type: string
      backups_enabled:
        type: boolean
      banner:
        type: string
      channels:
        items:
          $ref: '#/definitions/discordgo.Channel'
        type: array
      description:
        type: string
      icon:
        type: string
      icon_url:
        type: string
      id:
        type: string
      invite_block_enabled:
        type: boolean
      joined_at:
        type: string
      large:
        type: boolean
      latest_backup_entry:
        type: string
      member_count:
        type: integer
      mfa_level:
        type: integer
      name:
        type: string
      owner_id:
        type: string
      premium_subscription_count:
        type: integer
      premium_tier:
        type: integer
      region:
        type: string
      roles:
        items:
          $ref: '#/definitions/discordgo.Role'
        type: array
      self_member:
        $ref: '#/definitions/models.Member'
      splash:
        type: string
      unavailable:
        type: boolean
      verification_level:
        type: integer
    type: object
  models.InviteSettingsRequest:
    properties:
      guild_id:
        type: string
      invite_code:
        type: string
      message:
        type: string
    type: object
  models.InviteSettingsResponse:
    properties:
      guild:
        $ref: '#/definitions/models.Guild'
      invite_url:
        type: string
      message:
        type: string
    type: object
  models.LandingPageResponse:
    properties:
      localinvite:
        type: string
      publiccaranyinvite:
        type: string
      publicmaininvite:
        type: string
    type: object
  models.Member:
    properties:
      avatar_url:
        type: string
      chat_muted:
        type: boolean
      created_at:
        type: string
      deaf:
        description: Whether the member is deafened at a guild level.
        type: boolean
      dominance:
        type: integer
      guild_id:
        description: The guild ID on which the member exists.
        type: string
      joined_at:
        description: The time at which the member joined the guild, in ISO8601.
        type: string
      karma:
        type: integer
      karma_total:
        type: integer
      mute:
        description: Whether the member is muted at a guild level.
        type: boolean
      nick:
        description: The nickname of the member, if they have one.
        type: string
      pending:
        description: Is true while the member hasn't accepted the membership screen.
        type: boolean
      premium_since:
        description: When the user used their Nitro boost on the server
        type: string
      roles:
        description: A list of IDs of the roles which are possessed by the member.
        items:
          type: string
        type: array
      user:
        $ref: '#/definitions/discordgo.User'
        description: The underlying user on which the member is based.
    type: object
  models.Status:
    properties:
      code:
        type: integer
    type: object
  models.SystemInfo:
    properties:
      arch:
        type: string
      bot_invite:
        type: string
      bot_user_id:
        type: string
      build_date:
        type: string
      commit_hash:
        type: string
      cpus:
        type: integer
      go_routines:
        type: integer
      go_version:
        type: string
      guilds:
        type: integer
      heap_use:
        type: integer
      heap_use_str:
        type: string
      os:
        type: string
      stack_use:
        type: integer
      stack_use_str:
        type: string
      uptime:
        type: integer
      uptime_str:
        type: string
      version:
        type: string
    type: object
  models.User:
    properties:
      avatar:
        description: |-
          The hash of the user's avatar. Use Session.UserAvatar
          to retrieve the avatar itself.
        type: string
      avatar_url:
        type: string
      bot:
        description: Whether the user is a bot.
        type: boolean
      bot_owner:
        type: boolean
      created_at:
        type: string
      discriminator:
        description: The discriminator of the user (4 numbers after name).
        type: string
      email:
        description: |-
          The email of the user. This is only present when
          the application possesses the email scope for the user.
        type: string
      flags:
        description: |-
          The flags on a user's account.
          Only available when the request is authorized via a Bearer token.
        type: integer
      id:
        description: The ID of the user.
        type: string
      locale:
        description: The user's chosen language option.
        type: string
      mfa_enabled:
        description: Whether the user has multi-factor authentication enabled.
        type: boolean
      premium_type:
        description: |-
          The type of Nitro subscription on a user's account.
          Only available when the request is authorized via a Bearer token.
        type: integer
      public_flags:
        description: |-
          The public flags on a user's account.
          This is a combination of bit masks; the presence of a certain flag can
          be checked by performing a bitwise AND between this int and the flag.
        type: integer
      system:
        description: Whether the user is an Official Discord System user (part of
          the urgent message system).
        type: boolean
      token:
        description: |-
          The token of the user. This is only present for
          the user represented by the current session.
        type: string
      username:
        description: The user's username.
        type: string
      verified:
        description: Whether the user's email is verified.
        type: boolean
    type: object
  presence.Presence:
    properties:
      game:
        type: string
      status:
        type: string
    type: object
  shireikan.SubPermission:
    properties:
      description:
        type: string
      explicit:
        type: boolean
      term:
        type: string
    type: object
info:
  contact: {}
  description: The shinpuru main REST API.
  title: shinpuru main API
  version: "1.0"
paths:
  /auth/accesstoken:
    post:
      consumes:
      - application/json
      description: Exchanges the cookie-passed refresh token with a generated access
        token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AccessTokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: Access Token Exchange
  /auth/check:
    get:
      consumes:
      - application/json
      description: Returns OK if the request is authorized.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: Authorization Check
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Reovkes the currently used access token and clears the refresh
        token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
      summary: Logout
  /me:
    get:
      consumes:
      - application/json
      description: Returns the user object of the currently authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Me
  /ota:
    get:
      consumes:
      - application/json
      description: Logs in the current browser session by using the passed pre-obtained
        OTA token.
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: OTA Login
  /settings/noguildinvite:
    get:
      consumes:
      - application/json
      description: Returns the settings status for the suggested guild invite when
        the logged in user is not on any guild with shinpuru.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.InviteSettingsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "409":
          description: Returned when no channel could be found to create invite for.
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get No Guild Invites Status
    post:
      consumes:
      - application/json
      description: Set the status for the suggested guild invite when the logged in
        user is not on any guild with shinpuru.
      parameters:
      - description: Invite Settings Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.InviteSettingsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APITokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "409":
          description: Returned when no channel could be found to create invite for.
          schema:
            $ref: '#/definitions/models.Error'
      summary: Set No Guild Invites Status
  /settings/presence:
    get:
      consumes:
      - application/json
      description: Returns the bot's displayed presence status.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presence.Presence'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Presence
    post:
      consumes:
      - application/json
      description: Set the bot's displayed presence status.
      parameters:
      - description: Presence Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/presence.Presence'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APITokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Is returned when no token was generated before.
          schema:
            $ref: '#/definitions/models.Error'
      summary: Set Presence
  /sysinfo:
    get:
      consumes:
      - application/json
      description: Returns general global system information.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SystemInfo'
      summary: System Information
  /token:
    delete:
      consumes:
      - application/json
      description: Invalidates the currently generated API token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: API Token Deletion
    get:
      consumes:
      - application/json
      description: Returns general metadata information about a generated API token.
        The response does **not** contain the actual token!
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APITokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Is returned when no token was generated before.
          schema:
            $ref: '#/definitions/models.Error'
      summary: API Token Info
    post:
      consumes:
      - application/json
      description: (Re-)Generates and returns general metadata information about an
        API token **including** the actual API token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APITokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: API Token Generation
  /util/color/:hexcode:
    get:
      consumes:
      - application/json
      description: Produces a square image of the given color and size.
      parameters:
      - description: Hex Code of the Color to produce
        in: path
        name: hexcode
        required: true
        type: string
      - description: 'The dimension of the square image (default: 24)'
        in: query
        name: size
        type: integer
      produces:
      - image/png
      responses:
        "200":
          description: OK
          schema:
            type: data
      summary: Color Generator
  /util/commands:
    get:
      consumes:
      - application/json
      description: Returns a list of registered commands and their description.
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.CommandInfo'
            type: array
      summary: Command List
  /util/landingpageinfo:
    get:
      consumes:
      - application/json
      description: Returns general information for the landing page like the local
        invite parameters.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LandingPageResponse'
      summary: Landing Page Info
swagger: "2.0"
