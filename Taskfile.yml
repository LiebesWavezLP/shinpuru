version: '3'

vars:
  CONFIG_DIR: ./config
  BIN_DIR: ./bin
  RELEASE_DIR: ./release
  TAG: $(git describe --tags --abbrev=0)
  COMMIT: $(git rev-parse HEAD)
  DATE: $(date +%s)
  EMBED_DIR: ./internal/util/embedded
  APIDOCS_OUTDIR: ./docs/restapi/v1

tasks:
  default:
    deps: [release]

  release:
    desc:
      Build release artifacts of the backend, web frontend and tools.
    cmds:
      - rm -rf {{.RELEASE_DIR}}
      - task: embed-fe
      - task: build-fe-new
      - task: build-be
        vars: { RELEASE: "true" }
      - task: build-setup-tool
      - mkdir {{.RELEASE_DIR}}
      - cp {{.BIN_DIR}}/shinpuru{{exeExt}} {{.RELEASE_DIR}}
      - mkdir {{.RELEASE_DIR}}/web
      - cp -R web/dist {{.RELEASE_DIR}}/web
      - mkdir {{.RELEASE_DIR}}/web.new
      - cp -R web.new/dist {{.RELEASE_DIR}}/web.new
      - cp {{.BIN_DIR}}/setup{{exeExt}} {{.RELEASE_DIR}}

  embed-versions:
    cmds:
      - printf "{{.TAG}}" | tee {{.EMBED_DIR}}/AppVersion.txt
      - printf "{{.COMMIT}}" | tee {{.EMBED_DIR}}/AppCommit.txt
      - printf "{{.DATE}}" | tee {{.EMBED_DIR}}/AppDate.txt
      - printf "{{default "false" .RELEASE}}" | tee {{.EMBED_DIR}}/Release.txt

  cleanup-embeds:
    cmds:
      - git checkout
          {{.EMBED_DIR}}/AppVersion.txt
          {{.EMBED_DIR}}/AppCommit.txt
          {{.EMBED_DIR}}/AppDate.txt
          {{.EMBED_DIR}}/Release.txt

  build-be:
    sources:
      - cmd/**
      - internal/**
      - pkg/**
    cmds:
      - task: embed-versions
        vars: { RELEASE: "{{.RELEASE}}" }
      - defer: { task: cleanup-embeds }
      - go build
          -v
          -o {{.BIN_DIR}}/shinpuru{{exeExt}}
          cmd/shinpuru/main.go

  deps-fe:
    dir: web
    sources:
      - package.json
      - yarn.lock
    cmds:
      - yarn

  build-fe:
    deps:
      - deps-fe
    dir: web
    sources:
      - src/**
    cmds:
      - yarn run build

  embed-fe:
    deps:
      - build-fe
    cmds:
      - cp -R web/dist/web/* {{.EMBED_DIR}}/webdist

  deps-fe-new:
    dir: web.new
    sources:
      - package.json
      - yarn.lock
    cmds:
      - yarn

  build-fe-new:
    dir: web.new
    deps:
      - deps-fe-new
    sources:
      - public/**
      - src/**
      - index.html
      - "*.png"
    cmds:
      - yarn run build

  init-dev:
    preconditions:
      - sh: ls {{.CONFIG_DIR}}/private.config.yml && exit 1 || exit 0
        msg: "{{.CONFIG_DIR}}/private.config.yml already exists"
    cmds:
      - cp {{.CONFIG_DIR}}/my.private.config.yml {{.CONFIG_DIR}}/private.config.yml
      - cmd: echo Please go to {{.CONFIG_DIR}}/private.config.yml and enter your credentials!
        silent: true

  run:
    deps:
      - build-be
    preconditions:
      - sh: ls config/private.config.yml
        msg:
          config/private.config.yml does not exist. Please run 'task init-dev' and
          enter your credentials into the generated config file.
    cmds:
      - "{{.BIN_DIR}}/shinpuru
          -c {{.CONFIG_DIR}}/private.config.yml
          {{.CLI_ARGS}}"

  run-fe:
    deps:
      - deps-fe
    dir: web
    cmds:
      - yarn start

  run-fe-new:
    deps:
      - deps-fe-new
    dir: web.new
    cmds:
      - yarn start

  test:
    cmds:
      - go test -race -v -cover ./...

  apidocs:
    preconditions:
      - sh: which swag
        msg:
          swag is not installed. Please install it using the following command.

          $ go install github.com/swaggo/swag/cmd/swag@latest
      - sh: which swagger-markdown
        msg:
          swagger-markdown is not installed. Please install it using the following command.

          $ npm install -g swagger-markdown
    cmds:
      - swag init
          -g ./internal/services/webserver/v1/router.go
          -o {{.APIDOCS_OUTDIR}}
          --parseDependency --parseDepth 2
      - rm {{.APIDOCS_OUTDIR}}/docs.go
      - swagger-markdown
          -i {{.APIDOCS_OUTDIR}}/swagger.json
          -o {{.APIDOCS_OUTDIR}}/restapi.md

  build-setup-tool:
    sources:
      - cmd/**
      - pkg/**
      - internal/**
    cmds:
      - go build
          -v
          -o {{.BIN_DIR}}/setup{{exeExt}}
          cmd/setup/main.go

  build-cmdman-tool:
    sources:
      - cmd/**
      - pkg/**
      - internal/**
    cmds:
      - go build
          -v
          -o {{.BIN_DIR}}/cmdman{{exeExt}}
          cmd/cmdman/main.go

  refresh-interfaces:
    preconditions:
      - sh: which schnittstelle
        msg:
          schnittstelle is not installed. Please install it using the following command.

          $ go install github.com/zekrotja/schnittstelle/cmd/schnittstelle@latest
    vars:
      DISCORDGO_VERSION:
        sh: cat go.mod | grep github.com/bwmarrin/discordgo | awk '{print $2}'
      DISCORDGO_PATH:
        sh: echo $(go env GOPATH)/pkg/mod/github.com/bwmarrin/discordgo@{{.DISCORDGO_VERSION}}
    cmds:
      - schnittstelle
          -root {{.DISCORDGO_PATH}}
          -struct Session
          -interface ISession
          -package discordutil
          -out pkg/discordutil/isession.go

  refresh-mocks:
    preconditions:
      - sh: which mockery
        msg:
          mockery is not installed. Please install it using the following command.

          $ go install github.com/vektra/mockery/v2@latest
    cmds:
      - mockery -r
          --dir pkg/discordutil
          --name ISession
          --structname ISession
          --filename ISession.go
